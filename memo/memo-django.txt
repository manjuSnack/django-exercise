---

Python / airbnb Full stack

---

🍫 airbnb Full stack

Django, REST Framework, Strawberry, React, Chakra UI

-- Theory

Django ORM
Unit Testing
User Management
Admin Panel Customization
Function Based Views
Class Based Views
Django Templates

-- Packages

Django
Django Rest Framework
Strawberry
Render
SQL
Chakra UI
React
React Testing Library
React Query
Apollo Client

---

#0 INTRODUCTION, #0.1 Requirements

Django
: ReactJS보다 오래된 Framework이다.

---

#0.2 Why Django

RSS ( Really Simple Syndication, Rich Site Summary )

---

#0.3 Django vs Flask

--🥤 django와 flask

flask는 소규모에 적합하고, django는 대규모에 적합하다.

#1 SET UP, #1.0 Python3, #1.1 Poetry

🥤 Python Linux에 Install

sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update
sudo apt-get install python3.9

🥤 python3.9 실행되게 변경

code ~/.zshrc 에서
alias python=python3.9로 변경

--🥤 alias python=nothing을 쓰면 python이 실행되지 않는다.

🥤 Poetry Install

curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.2.0a2 python3.9

: <POETRY_VERSION>과 Python 버전은 직접 입력하는 것이 좋다.

--🥤 Poetry uninstall

curl -sSL https://install.python-poetry.org | python3 - --uninstall
curl -sSL https://install.python-poetry.org | POETRY_UNINSTALL=1 python3 -
: 둘 중에 하나

rm -rf "${POETRY_HOME:-~/.poetry}"
: 환경변수 설정한 get-poetry.py 삭제

--🥤 Poetry 1.2로 설치
: 1.1.14는 django 버전과 호환이 되지 않는다.

Poetry 환경변수 설정

code ~/.zshrc
export PATH=$HOME/.local/bin:$PATH

--🥤 $HOME

: ~ 경로를 뜻 한다.

--🥤 Poetry 설정

> poetry init

Would you like to define your main dependencies interactively? no
Would you like to define your development dependencies interactively? no
Do you confirm generation? yes

--🥤 django 추가

> poetry add django
> poetry shell
: django가 설치된 환경 안으로 접속. 나가는 법은 exit 명령어를 입력하면 된다.

> django-admin
: bubble(환경)에 접속해야 실행할 수 있다.

--🥤 beautifulsoup4

> poetry add beautifulsoup4

# 1.2 Start Project

> django-admin startproject config .

: 점 . 을 추가해 폴더를 추가할 것!


#2 OOP WITH PYTHON, #2.0~2.4 #Introduction / __init__ / Inheritance / super( ) / Recap / dir( )

# OOP ( Object-Oriented Programing )

Object, Objects의 문제점
: 오타, property에 무언가 추가할 경우 일일히 모두 수정해야 하는 문제점이 있다.  Class, Inheritance로 이 문제점을 해결할 수 있다.

# Abstraction(추상화), Encapsulation(캡슐화), Inheritance(상속), Polymorphism(다형성)
 
# Functional Programming (함수형 프로그래밍)

Clojure, Scala

명령형(imperative) 코드와 선언형(declarative) 코드의 차이점

명령형(imperative) 코드
:  그 결과값에 '어떻게' 도달하느냐에 관한 것

선언형(declarative) 코드
: 대표적으로 CSS가 이에 해당 된다. 원하는 '결과값'을 선언하는 것. JavaScript에서는 .replaceAll( ), .filter( )와 같은 함수를 일컫는다.
대부분 선언형 코드의 내부에는 명령형 코드로 작성되어 있다.


---

--🥤 .gitignore

python으로 작성
